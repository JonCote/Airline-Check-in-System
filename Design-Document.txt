Design Document 
Assignment 2 
csc 360
Jonthan Cote V00962634


1) How many threads are you going to use? Specify the task that you intend each thread to perform
    1 thread per clerk (5 threads) and a threads per customer (5 + n + 1, where n is number of customers) 
    Clerk threads will manage pull customers from queue and dequeue them then provide service to that customer. Customers threads will be used to add customers to their respective queue and signal
    the clerk threads that a new customer is in the queue.


2) Do the threads work independently? Or, is there an overall "controller" thread?
    customer threads work independently for most part other then signaling clerk threads that they have added a new customer. Clerk threads are also mostly independent other than requiring a signal from the customer
    threads if queues are empty but more customers are needing service. main thread is used to pull customer info from input and build customer info datastructure


3) How many mutexes are you going to use? Specify the operation that each mutex will guard
    4 mutexes, 1 for protecting the addition/subtraction from each queue, 1 to control customer arrivals, and 1 for protecting customer serviced info


4) Will the main thread be idle? If not, what will it be doing?
    main thread is idle after building customer info datastructure and starting up all the customer/clerk threads up to the point where all these threads return.


5) How are you going to represent customers? what type of data strucute will you use?
    will be using structs to hold customer info that will be passed into a linked-list when they are queued.


6) How are you going to ensure that data structures in your program will not be modified concurrently?
    Using a critical section (mutex controlled) area for the addition and popping from queues will help element addition+extraction concurrent modification issues.


7) How many convars are you going to use? For each convar:
    2 one for each queue type (economy, business)

    a) Describe the condition that the convar will represent
        when a customer is queued in that queue

    b) Which mutex is associated with the convar? Why?
        the mutex used to limit clerks from grabing customers at same time + the addition of new customers to the queue.
        Will be used to determine if clerk should not grab customers and instead let customers arrivals be prioritived

    c) What operation should be performed once pthread_cond_wait() has been unblocked and re-acquired the mutex?
        clerk should grab a customer


8) Briefly sketch the overall algorithm you will use. You may use sentences such as (If clerk i finishes service, release clerkImutex)
    Main:
        parse the input file and store customer info into structs.
        store the total customer count

        create clerk threads

        create customer threads

        wait for thread exit

        after all threads have exited:
            calculate avg wait times for each subgroup (complete, business, economy)
    
    Clerk:
        If business queue is not empty and clerk is available:
            if customer is arriving wait for customer to signal their arrival is complete:
           
            grab the customer at the front of the business queue, provide service with available clerk and increment serviced customer count

        If business queue is empty and economy queue is not empty and clerk available:
            if customer is arriving wait for customer to signal their arrival is complete:

            grab the customer at the front of the economy queue, provide service with available clerk and increment serviced customer count

        If both queues empty clerk idles tell a queue is not empty anymore or serviced serviced customer count equals total customer count:

        once serviced customer count is equal to total customer count and clerk done servicing customer exit the clerk thread

    Customer:
        When customer arrives specify their arrival and add to their respective classes queue, once added signal that they are now in the queue
        once customer is added to the queue and signaled their arrival exit customer thread
